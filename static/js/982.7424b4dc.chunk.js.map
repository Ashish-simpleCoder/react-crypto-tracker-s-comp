{"version":3,"file":"static/js/982.7424b4dc.chunk.js","mappings":"wPAAO,IAAMA,EAAW,SAACC,GAAD,2EACwCA,EADxC,+DAGXC,EAAa,SAACC,GAAD,uDACkBA,IAE/BC,EAAkB,SAACD,GAAD,IAAKE,EAAL,uDAAY,IAAKJ,EAAjB,8FACaE,EADb,qCAC4CF,EAD5C,iBAC6DI,IAE/EC,EAAgB,SAACL,GAAD,2EACmCA,EADnC,sF,gGCQ7B,EAjBwB,SAACM,GACrB,IAKMC,EAAK,IAAIC,sBAAqB,SAACC,GACjCA,EAAQC,SAAQ,SAAAC,GACTA,EAAMC,iBACLN,GAAW,GACXC,EAAGM,UAAUC,OAAOC,kBAThB,CACZC,KAAK,KACLC,WAAW,MACXC,UAAU,KAWdX,EAAGY,QAAQL,OAAOC,a,gDCItB,GAfiBK,EAAAA,EAAAA,OAAK,YAAW,IAATC,EAAQ,EAARA,KACbC,GAAUC,EAAAA,EAAAA,KAAVD,OACFE,EAAoFH,EAApFG,KAAMC,EAA8EJ,EAA9EI,MAAOC,EAAuEL,EAAvEK,cAA2CC,EAA4BN,EAAxDO,4BAA0CC,EAAcR,EAAdQ,WAEvEC,GADJH,EAAgBA,EAAe,EAAK,IAAIA,EAAeA,GAC3B,EAAI,OAAS,QAEzC,OADAE,EAAaA,EAAWE,WAAWC,MAAM,EAAG,IAExC,2BACG,SAACC,EAAD,CAAWT,KAAMA,EAAMC,MAAOA,KAC9B,SAACQ,EAAD,CAAWT,KAAME,EAAeJ,OAAQA,KACxC,SAACW,EAAD,CAAWT,KAAMG,EAAcG,OAAQA,KACvC,SAACG,EAAD,CAAWT,KAAMK,EAAYP,OAAQA,UAMnCW,GAAYb,EAAAA,EAAAA,OAAK,YAAiC,IAA/BI,EAA8B,EAA9BA,KAAKC,EAAyB,EAAzBA,MAAOH,EAAkB,EAAlBA,OAAQQ,EAAU,EAAVA,OAChD,OACI,gBAAII,MAAOT,GAAS,CAACU,QAAQ,OAAOC,WAAW,UAAYC,UAAWP,IAAsB,SAAXA,EAAoB,SAAW,QAAhH,UACML,IAAS,gBAAKa,IAAKb,EAAOc,IAAI,SAC/BjB,GAAUA,EAAO,IAAKE,QCZnC,GATkBJ,EAAAA,EAAAA,OAAK,YAAY,IAAVoB,EAAS,EAATA,MACrB,OACI,SAACC,EAAD,WACI,wBACMD,EAAME,KAAI,SAAAC,GAAC,OAAE,SAACV,EAAD,CAAmBT,KAAMmB,GAATA,aAOzCF,EAAaG,EAAAA,GAAAA,MAAH,gGCChB,GAVkBxB,EAAAA,EAAAA,OAAK,WACnB,OAAkCG,EAAAA,EAAAA,KAA3BsB,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,MAAOC,EAA3B,EAA2BA,IAC3B,OACI,SAACC,EAAD,UAEQH,EAAYb,MAAMc,EAAMC,EAAI,GAAGL,KAAI,SAAArB,GAAI,OAAE,SAAC,EAAD,CAA0BA,KAAMA,GAAjBA,EAAKG,cAOvEwB,EAAaJ,EAAAA,GAAAA,MAAH,mECbVK,EAAc,CAAC,OAAO,QAAQ,aAAa,cASjD,GARkB7B,EAAAA,EAAAA,OAAK,WACnB,OACI,UAAC8B,EAAD,CAAahB,MAAO,CAACiB,eAAe,WAAWC,SAAS,SAAUlD,GAAG,aAArE,WACI,SAAC,EAAD,CAAWsC,MAAOS,KAClB,SAAC,EAAD,UAONC,EAAcN,EAAAA,GAAAA,MAAH,kaCmBjB,GAhCmBxB,EAAAA,EAAAA,OAAK,WAIpB,IAHA,OAA4CG,EAAAA,EAAAA,KAArCsB,EAAP,EAAOA,YAAaQ,EAApB,EAAoBA,YAAaC,EAAjC,EAAiCA,QAC3BC,EAAcV,EAAYW,OAAS,GACrCC,EAAM,GACFC,EAAG,EAAEA,EAAEH,EAAYG,IACvBD,EAAIE,KAAKD,EAAE,GAMf,IAAME,EAAa,SAACC,GAAD,OAAiBP,EAAQ,CACxCR,OAASe,EAAc,GAAKN,EAC5BR,IAAOc,EAAcN,EAAe,EACpCF,YAAYQ,KAGhB,OACI,SAACC,EAAD,UACML,EAAIf,KAAI,SAACqB,GACP,OACI,SAACC,EAAD,CAEIC,KAAMF,EACNG,YAAaN,EACbO,UAAYJ,IAAcV,GAAe,sBAHpCU,WAavBC,GAAO5C,EAAAA,EAAAA,OAAK,YAAqC,IAAnC6C,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,UACnC,OACI,eAAIC,QAAS,kBAAIF,GAAeA,EAAYD,IAAO5B,UAAW8B,GAAwB,GAAtF,SAA2FF,OAI7FH,EAAmBlB,EAAAA,GAAAA,IAAH,2ZCtBtB,GAhB2BxB,EAAAA,EAAAA,OAAK,YAAuB,IAArBiD,EAAoB,EAApBA,QAASC,EAAW,EAAXA,QACvC,GAAkC/C,EAAAA,EAAAA,KAA3BvB,EAAP,EAAOA,SAAUuE,EAAjB,EAAiBA,cAKjB,OAJAC,EAAAA,EAAAA,YAAU,WACNF,IAAWG,EAAAA,EAAAA,IAAkBzE,GAAU0E,MAAK,SAAAC,GAAG,OAAEJ,EAAcI,QACjE,CAACJ,EAAcvE,EAASsE,KAGtB,qBAASpC,MAAO,CAAC0C,QAAQ,4BAA4BC,UAAU,SAASC,OAAO,QAA/E,WACI,eAAI5C,MAAO,CAAC6C,SAAS,2BAA2BC,OAAO,iBAAvD,SAA0EX,KAC1E,oBAASnC,MAAO,CAAC+C,MAAM,OAAOC,UAAU,QAAxC,UACA,SAAC,EAAD,OAEA,SAAC,EAAD,U,8ECQZ,GAxBqB9D,EAAAA,EAAAA,OAAK,YAA0B,IAAxBC,EAAuB,EAAvBA,KAAM8D,EAAiB,EAAjBA,cACxBjF,EAAuEmB,EAAvEnB,GAAIsB,EAAmEH,EAAnEG,KAAMF,EAA6DD,EAA7DC,OAAQG,EAAqDJ,EAArDI,MAAOG,EAA8CP,EAA9CO,4BAA6BF,EAAiBL,EAAjBK,cACzDI,EAASF,GAA6B,EAE1C,OACA,UAAC,KAAD,CAAMwD,GAAE,iBAAYlF,GAAMgC,MAAOmD,EAAjC,WACG,gBACG/C,IAAKb,EACLc,IAAKf,EACLU,MAAO,CAAC4C,OAAO,wBAAwBQ,aAAa,WAEvD,kBAAMpD,MAAOqD,EAAb,UAAyBjE,EAAzB,SACM,kBAAMY,MAAO,CAACsD,MAAQ1D,EAAU,oBAAsB,mBAAtD,UACIA,EAAO,GAAK,KADhB,OAEIF,QAFJ,IAEIA,OAFJ,EAEIA,EAA6B6D,QAAQ,GAFzC,WAMN,kBAAMvD,MAAO,CAAC6C,SAAS,6BAA6BW,UAAU,OAAOF,MAAM,oBAA3E,UACKL,EAAgBzD,EAAc+D,QAAQ,YAQ3CJ,EAAY,CACflD,QAAQ,OACRwD,cAAc,SACdvD,WAAW,SACXwD,eAAe,gBACfC,OAAO,UACPC,cAAc,aAEXP,EAAY,CACfC,MAAM,uBACNT,SAAS,8BChCNgB,GAAW3E,EAAAA,EAAAA,OAAK,WACnB,OAA6DG,EAAAA,EAAAA,KAAtDvB,EAAP,EAAOA,SAAUsB,EAAjB,EAAiBA,OAAQ0E,EAAzB,EAAyBA,eAAgBC,EAAzC,EAAyCA,iBAEzC,GAAgCC,EAAAA,EAAAA,WAAS,GAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KASA,OAPAC,YAAW,kBAAID,GAAY,KAAM,MAEjC5B,EAAAA,EAAAA,YAAU,YA4Bb,SAKkC,GAAnB8B,OAAAA,EAAAA,MAAAA,KAAAA,YAhCTA,CAAmBtG,GAAU0E,MAAK,SAAA6B,GAAK,OAAEN,EAAiBM,QAC1D,CAACvG,KAID,gBAAKkC,MAAO,CAACC,QAAQ,OAAOC,WAAW,SAAS0C,OAAO,MAAMG,MAAM,QAAnE,UACA,SAAC,IAAD,CAMGuB,MAAOC,EAAST,EAAgB1E,GAChCoF,UAAQ,EACRC,iBAAkB,IAClBC,kBAAmB,IACnBC,WAAYA,EACZC,qBAAmB,EACnBC,wBAAsB,EACtBZ,SAAYA,SAMrB,IAEMU,EAAY,CACf,EAAE,CAACL,MAAM,GACT,IAAI,CAACA,MAAM,GACX,KAAK,CAACA,MAAM,IAEAF,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAkCtG,GAAlC,uFACmBgH,OAAM3G,EAAAA,EAAAA,IAAcL,IADvC,cACO2E,EADP,gBAEgBA,EAAIsC,OAFpB,0GAKA,I,IAAMR,EAAW,SAACT,EAAeb,GAAhB,OAAkCa,EAAetD,KAAI,SAACrB,GAAD,OAAQ,SAAC,EAAD,CAAcA,KAAMA,EAAM8D,cAAeA,QCpCvH,GAboB/D,EAAAA,EAAAA,OAAK,WAEtB,OACG,UAAC8F,EAAD,YACG,gBAAK7E,UAAU,WAAWC,IAAI,sBAAsBC,IAAI,UACxD,UAAC4E,EAAD,YACG,4CACA,2EAEH,SAAC,EAAD,UAMHD,EAAatE,EAAAA,GAAAA,QAAH,ggBA4BVuE,EAAYvE,EAAAA,GAAAA,IAAH,kXChCf,GAViBxB,EAAAA,EAAAA,OAAK,WACnB,OAA8B8E,EAAAA,EAAAA,WAAS,GAAvC,eAAO5B,EAAP,KAAgBhE,EAAhB,KAEA,OADAkE,EAAAA,EAAAA,YAAU,kBAAI4C,EAAgB9G,KAAY,KAEvC,iCACG,SAAC,EAAD,KACA,SAAC,EAAD,CAAoB+D,QAAQ,yCAAyCC,QAASA,W,yHCTjFG,EAAiB,mCAAG,WAAMzE,GAAN,iFAAsCgH,OAAMjH,EAAAA,EAAAA,IAASC,IAArD,8BAAiEiH,OAAjE,iHAAH,sDACvB,OAEO,IAAMI,EAAmB,mCAAG,WAAMnH,GAAN,iFAAgC8G,OAAM/G,EAAAA,EAAAA,IAAWC,IAAjD,8BAAuD+G,OAAvD,iHAAH,sDACnBK,EAAgB,mCAAG,WAAMpH,EAAIE,EAAMJ,GAAhB,iFAAgDgH,OAAM7G,EAAAA,EAAAA,IAAgBD,EAAIE,EAAMJ,IAAhF,8BAA4FiH,OAA5F,iHAAH","sources":["api/api.js","utils/lazyLoadTableData.js","pages/Home/CoinTable/Table.row.jsx","pages/Home/CoinTable/Table.head.jsx","pages/Home/CoinTable/Table.body.jsx","pages/Home/CoinTable/Coin.table.jsx","pages/Home/CoinTable/Pagination.jsx","pages/Home/CoinTable/CoinTableContainer.jsx","pages/Home/CarousalItem.jsx","pages/Home/Carousal.jsx","pages/Home/Hero.section.jsx","pages/Home/Home.page.jsx","utils/fetchCoinsDetails.js"],"sourcesContent":["export const CoinList = (currency) =>\r\n  `https://api.coingecko.com/api/v3/coins/markets?vs_currency=${currency}&order=market_cap_desc&per_page=100&page=1&sparkline=false`;\r\n\r\nexport const SingleCoin = (id) =>\r\n  `https://api.coingecko.com/api/v3/coins/${id}`;\r\n\r\nexport const HistoricalChart = (id, days = 365, currency) =>\r\n  `https://api.coingecko.com/api/v3/coins/${id}/market_chart?vs_currency=${currency}&days=${days}`;\r\n\r\nexport const TrendingCoins = (currency) =>\r\n  `https://api.coingecko.com/api/v3/coins/markets?vs_currency=${currency}&order=gecko_desc&per_page=10&page=1&sparkline=false&price_change_percentage=24h`;","const checkVisibility = (setVisible) =>{\r\n    const options = {\r\n        root:null,\r\n        rootMargin:'0px',\r\n        threshold:0.5\r\n    }\r\n    const io = new IntersectionObserver((entries)=>{\r\n        entries.forEach(entry=>{\r\n            if(entry.isIntersecting) {\r\n                setVisible(true)\r\n                io.unobserve(window.data_table)\r\n            }\r\n            // else io.unobserve(window.data_table)\r\n        })\r\n    },options)\r\n    io.observe(window.data_table)\r\n}\r\nexport default checkVisibility","import { memo } from \"react\";\r\nimport CryptoState from \"../../../context/CryptoCtx\";\r\n\r\n\r\nconst TableRow = memo(({coin})=>{\r\n    const {symbol} = CryptoState()\r\n    let {name, image, current_price, price_change_percentage_24h:price_change, market_cap} = coin\r\n    price_change = (price_change > 0) ? \"+\"+price_change : price_change\r\n    let profit = price_change > 0 ? \"true\" : 'false'\r\n    market_cap = market_cap.toString().slice(0, 6)\r\n    return(\r\n        <tr>\r\n           <TableData name={name} image={image}/>\r\n           <TableData name={current_price} symbol={symbol}/>\r\n           <TableData name={price_change} profit={profit}/>\r\n           <TableData name={market_cap} symbol={symbol}/>\r\n        </tr>\r\n    )\r\n})\r\nexport default TableRow\r\n\r\nexport const TableData = memo(({name,image, symbol, profit})=>{\r\n    return(\r\n        <td style={image && {display:'flex',alignItems:'center'}}  className={profit && (profit === 'true' ? 'profit' : 'lose')}>\r\n            { image && <img src={image} alt='coin'></img> }\r\n            {symbol && symbol+\" \"}{name}\r\n        </td>\r\n    )\r\n})","import { memo } from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { TableData } from \"./Table.row\"\r\n\r\nconst TableHead = memo(({heads})=>{\r\n    return(\r\n        <StyledHead>\r\n            <tr>\r\n                { heads.map(h=><TableData key={h} name={h} />) }\r\n            </tr>\r\n        </StyledHead>\r\n    )\r\n})\r\nexport default TableHead\r\n\r\nconst StyledHead = styled.thead`\r\n    color:var(--secondary-clr);\r\n    font-size:clamp(1.8rem,2rem,2vw);\r\n`","import { memo} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport CryptoState from \"../../../context/CryptoCtx\"\r\nimport TableRow from \"./Table.row\";\r\n\r\n\r\nconst TableBody = memo(()=>{\r\n    const {TABLE_COINS, start, end} = CryptoState()\r\n    return(\r\n        <StyledBody>\r\n            {\r\n                TABLE_COINS.slice(start,end+1).map(coin=><TableRow key={coin.name} coin={coin}/>)\r\n            }\r\n        </StyledBody>\r\n    )\r\n})\r\nexport default TableBody\r\n\r\nconst StyledBody = styled.tbody`\r\n    font-size:clamp(1.6rem,1.7rem,1.7vw);\r\n`","import { memo} from \"react\"\r\nimport styled from \"styled-components\"\r\nimport TableHead from \"./Table.head\"\r\nimport TableBody from \"./Table.body\"\r\n\r\nconst table_heads = ['Coin','Price','24h Change','Market Cap']\r\nconst CoinTable = memo(()=>{\r\n    return(\r\n        <StyledTable style={{borderCollapse:'collapse',minWidth:'60rem'}} id='data_table'>\r\n            <TableHead heads={table_heads}/>\r\n            <TableBody/>\r\n        </StyledTable>\r\n    )\r\n})\r\nexport default CoinTable\r\n\r\n\r\nconst StyledTable = styled.table`\r\n    text-align:center;\r\n    width:100%;\r\n    background:var(--table-bg);\r\n    color:var(--prm-clr);\r\n    max-width:90rem;\r\n    margin:auto;\r\n    tbody,tr,td{\r\n        border:1px solid var(--border);\r\n        border-collapse:collapse;\r\n    }\r\n    td{\r\n        padding:1rem;\r\n        img{\r\n            width:3rem;\r\n            height:3rem;\r\n            margin-inline-end:2rem;\r\n        }\r\n    }\r\n`\r\n\r\n","import { memo} from \"react\"\r\nimport styled from \"styled-components\"\r\nimport CryptoState from \"../../../context/CryptoCtx\"\r\n\r\nconst Pagination = memo(()=>{\r\n    const {TABLE_COINS, active_page, setPage} = CryptoState()\r\n    const total_pages = TABLE_COINS.length / 10\r\n    let arr = []     //creating it for handling showing the total pages and changing the pages\r\n    for(let i =0;i<total_pages;i++){\r\n        arr.push(i+1)\r\n    }\r\n    // just do the math to find out the pagination\r\n    // formula made by Ashish-simpleCoder\r\n    // if user wants to change page of coin then developer has to define something\r\n    // and that thing is below\r\n    const changePage = (page_number) => setPage({\r\n        start : (page_number - 1) * total_pages,\r\n        end : (page_number * total_pages) - 1,\r\n        active_page:page_number,\r\n    })\r\n\r\n    return(\r\n        <StyledPagination>\r\n            { arr.map((page_numb)=>{\r\n                return(\r\n                    <List\r\n                        key={page_numb}\r\n                        text={page_numb}\r\n                        handleClick={changePage}\r\n                        style_cls={(page_numb === active_page)&& 'active_page_styles'}\r\n                    />\r\n                )\r\n            }) }\r\n        </StyledPagination>\r\n    )\r\n})\r\nexport default Pagination\r\n\r\n\r\nconst List = memo(({text, handleClick, style_cls}) => {\r\n    return(\r\n        <li onClick={()=>handleClick && handleClick(text)} className={style_cls ? style_cls : ''}>{text}</li>\r\n    )\r\n})\r\n\r\nconst StyledPagination = styled.div`\r\n    width:100%;\r\n    display:flex;\r\n    justify-content:center;\r\n    margin-top:1rem;\r\n    li{\r\n        color:var(--prm-clr);\r\n        &:hover{\r\n            background: var(--secondary-clr);\r\n            color:var(--prm-clr);\r\n            border-radius: 0.3rem;\r\n        }\r\n    }\r\n    .active_page_styles{\r\n        background:var(--secondary-clr);\r\n        color:var(--prm-clr);\r\n    }\r\n`","import { memo, useEffect } from \"react\";\r\nimport CryptoState from \"../../../context/CryptoCtx\";\r\nimport fetchCoinsDetails from \"../../../utils/fetchCoinsDetails\";\r\nimport CoinTable from \"./Coin.table\";\r\nimport Pagination from \"./Pagination\";\r\n\r\n\r\nconst CoinTableContainer = memo(({heading, visible})=>{\r\n    const {currency, setTableCoins} = CryptoState()\r\n    useEffect(()=>{\r\n        visible && fetchCoinsDetails(currency).then(res=>setTableCoins(res))\r\n    },[setTableCoins,currency,visible])\r\n\r\n    return(\r\n        <section style={{padding:'3rem clamp(1rem,3rem,3vw)',textAlign:'center',height:'100%'}}>\r\n            <h2 style={{fontSize:'clamp(2rem,2.6rem,2.6vw)',margin:'1rem 0 2rem 0'}}>{heading}</h2>\r\n            <section style={{width:'100%',overflowX:'auto'}}>\r\n            <CoinTable/>\r\n            </section>\r\n            <Pagination/>\r\n        </section>\r\n    )\r\n})\r\nexport default CoinTableContainer","import { memo } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst CarousalItem = memo(({coin, select_symbol})=>{\r\n   const {id, name, symbol ,image, price_change_percentage_24h, current_price} = coin\r\n   let profit = price_change_percentage_24h>=0\r\n\r\n   return(\r\n   <Link to={`/coins/${id}`} style={ItemStyle}>\r\n      <img\r\n         src={image}\r\n         alt={name}\r\n         style={{height:'clamp(6rem,8rem,10vw)',marginBottom:'1rem'}}\r\n      />\r\n      <span style={SpanStyle}>{symbol} &nbsp;\r\n            <span style={{color : profit  ? 'var(--profit-clr)' : 'var(--lose-clr)'}}>\r\n               {profit>0 && ' +'}\r\n               {price_change_percentage_24h?.toFixed(2)}%\r\n            </span>\r\n      </span>\r\n\r\n      <span style={{fontSize:'clamp(1.4rem,1.4rem,1.4vw)',marginTop:'1rem',color:'var(--price-clr)'}}>\r\n         { select_symbol }{current_price.toFixed(2)}\r\n      </span>\r\n   </Link>\r\n   )\r\n})\r\nexport default CarousalItem\r\n\r\n\r\nconst ItemStyle = {\r\n   display:'flex',\r\n   flexDirection:'column',\r\n   alignItems:'center',\r\n   justifyContent:'space-between',\r\n   cursor:'pointer',\r\n   textTransform:'uppercase',\r\n}\r\nconst SpanStyle = {\r\n   color:'var(--coin-name-clr)',\r\n   fontSize:'clamp(1.3rem,1.5rem,1.5vw)'\r\n}\r\n","import { memo, useEffect, useState } from \"react\"\r\nimport AliceCarousel from \"react-alice-carousel\"\r\nimport { TrendingCoins } from \"../../api/api\"\r\nimport CryptoState from \"../../context/CryptoCtx\"\r\nimport 'react-alice-carousel/lib/alice-carousel.css'\r\nimport CarousalItem from \"./CarousalItem\"\r\n\r\n\r\nconst Carousal = memo(()=>{\r\n   const {currency, symbol, trending_coins, setTrendingCoins} = CryptoState()\r\n   // const [trending_coins,setTrendingCoins] = useState([])\r\n   const [autoPlay, setAutoPlay] = useState(false)\r\n\r\n   setTimeout(()=>setAutoPlay(true),1000)\r\n\r\n   useEffect(()=>{\r\n      fetchTrendingCoins(currency).then(coins=>setTrendingCoins(coins))\r\n   }, [currency])\r\n\r\n\r\n   return(\r\n      <div style={{display:'flex',alignItems:'center',height:'60%',width:'100%'}}>\r\n      <AliceCarousel\r\n         // items will take an array of jsx element or normal html elements and render it\r\n         //this will take an array of object of coins\r\n         //then it will render all of the links with images if provided\r\n         // we must provide the elements which we want to render inside of carousal\r\n         // we are passing a function which will render all of the element\r\n         items={itemsObj(trending_coins, symbol)}\r\n         infinite\r\n         autoPlayInterval={1000}\r\n         animationDuration={1000}\r\n         responsive={responsive}\r\n         disableDotsControls\r\n         disableButtonsControls\r\n         autoPlay = {autoPlay}\r\n      >\r\n      </AliceCarousel>\r\n      </div>\r\n   )\r\n})\r\nexport default Carousal\r\n\r\nconst responsive ={\r\n   0:{items:2},\r\n   700:{items:4},\r\n   1200:{items:6}\r\n}\r\nasync function fetchTrendingCoins(currency){\r\n   let res = await fetch(TrendingCoins(currency))\r\n   return await res.json()\r\n}\r\n\r\nconst itemsObj = (trending_coins,select_symbol) => trending_coins.map((coin)=><CarousalItem coin={coin} select_symbol={select_symbol}/>)\r\n\r\n\r\n","import {memo} from 'react'\r\nimport styled from 'styled-components'\r\nimport Carousal from './Carousal'\r\n\r\nconst HeroSection = memo(()=>{\r\n\r\n   return(\r\n      <StyledHero>\r\n         <img className='hero_img' src=\"./imgs/hero_bg.avif\" alt=\"hero\" />\r\n         <HeroTitle>\r\n            <h2>Crypto Tracker</h2>\r\n            <p>Get all information about crypto currencies</p>\r\n         </HeroTitle>\r\n         <Carousal/>\r\n      </StyledHero>\r\n   )\r\n})\r\nexport default HeroSection\r\n\r\nconst StyledHero = styled.section`\r\n   display:flex;\r\n   flex-direction:column;\r\n   justify-content:space-between;\r\n   align-items:center;\r\n   height:80%;\r\n   width:100%;\r\n   overflow:hidden;\r\n   position:relative;\r\n   background:none;\r\n\r\n   >img{\r\n      position:absolute;\r\n      height:100%;\r\n      width:100%;\r\n      z-index:-1;\r\n      filter:brightness(0.25);\r\n   }\r\n   @media (min-width:700px){\r\n      max-height:60rem;\r\n      height:100%;\r\n      >img{\r\n         height:100%;\r\n         max-height:60rem\r\n      }\r\n   }\r\n`\r\n\r\nconst HeroTitle = styled.div`\r\n   height:40%;\r\n   display:flex;\r\n   flex-direction:column;\r\n   align-items:center;\r\n   justify-content:center;\r\n   h2{\r\n      font-size:clamp(4rem,5rem,5vw);\r\n      font-weight:500;\r\n      color:var(--hero-title-clr);\r\n   }\r\n   p{\r\n      font-size:clamp(1.6rem,1.8rem,1.8vw);\r\n      color:var(--hero-caption-clr);\r\n      margin-top:1rem;\r\n   }\r\n`\r\n","import { memo, useEffect, useState } from \"react\";\r\nimport checkVisibility from \"../../utils/lazyLoadTableData\";\r\nimport CoinTableContainer from \"./CoinTable/CoinTableContainer\";\r\nimport HeroSection from \"./Hero.section\";\r\n\r\nconst HomePage = memo(()=>{\r\n   const [visible, setVisible] = useState(false)\r\n   useEffect(()=>checkVisibility(setVisible),[])\r\n   return(\r\n      <>\r\n         <HeroSection/>\r\n         <CoinTableContainer heading=\"Crypto-Currency's Prices by Market Cap\" visible={visible}/>\r\n      </>\r\n   )\r\n})\r\nexport default HomePage\r\n","import { CoinList, HistoricalChart, SingleCoin } from \"../api/api\"\r\n\r\nconst fetchCoinsDetails = async(currency) => await await (await fetch(CoinList(currency))).json()\r\nexport default fetchCoinsDetails\r\n\r\nexport const selectedCoinDetails = async(id) => await await (await fetch(SingleCoin(id))).json()\r\nexport const fetchCoinHistory = async(id, days, currency) => await await (await fetch(HistoricalChart(id, days, currency))).json()\r\n"],"names":["CoinList","currency","SingleCoin","id","HistoricalChart","days","TrendingCoins","setVisible","io","IntersectionObserver","entries","forEach","entry","isIntersecting","unobserve","window","data_table","root","rootMargin","threshold","observe","memo","coin","symbol","CryptoState","name","image","current_price","price_change","price_change_percentage_24h","market_cap","profit","toString","slice","TableData","style","display","alignItems","className","src","alt","heads","StyledHead","map","h","styled","TABLE_COINS","start","end","StyledBody","table_heads","StyledTable","borderCollapse","minWidth","active_page","setPage","total_pages","length","arr","i","push","changePage","page_number","StyledPagination","page_numb","List","text","handleClick","style_cls","onClick","heading","visible","setTableCoins","useEffect","fetchCoinsDetails","then","res","padding","textAlign","height","fontSize","margin","width","overflowX","select_symbol","to","ItemStyle","marginBottom","SpanStyle","color","toFixed","marginTop","flexDirection","justifyContent","cursor","textTransform","Carousal","trending_coins","setTrendingCoins","useState","autoPlay","setAutoPlay","setTimeout","fetchTrendingCoins","coins","items","itemsObj","infinite","autoPlayInterval","animationDuration","responsive","disableDotsControls","disableButtonsControls","fetch","json","StyledHero","HeroTitle","checkVisibility","selectedCoinDetails","fetchCoinHistory"],"sourceRoot":""}